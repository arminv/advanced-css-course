/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* NOTE: * is the universal selector in CSS, so * {style} would apply to everything */
* {
  margin: 0;
  padding: 0;
  /* NOTE: This removes any padding,margin, etc. when we set the height/width of elements:  */
  box-sizing: border-box;
}

body {
  /* NOTE: font settings are usually inherited by all child elements, so we set them on the body: */
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  /* NOTE: it means 1.7 times bigger than the pre-defined height: */
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
  height: 95vh;
  /* NOTE: this is how we apply a gradient to our bg image (basically two images on top of each other!): */
  /* NOTE: to right means start from top left and go to bottom right (to set the colors) */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 131, 0.8)
    ),
    url(../img/hero.jpg);
  /* NOTE: cover means try to cover the whole width of the viewport: */
  background-size: cover;
  /* NOTE: this ensures the bg image stays pinned to the top of the page: */
  background-position: top;
  /* NOTE: because the child element (.logo-box) needs this to be relative (to act as the starting point): */
  position: relative;

  /* NOTE: this is a modern css property that let's us cut off elements to get certain shapes: */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  /* NOTE: the position start is relative to the parent element (that should have 'position: relative;' set on it): */
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  /* NOTE: this is to align the middles (of both axes) of the element to the middle of page - this is relative to the element itself: */
  transform: translate(-50%, -50%);
  /* NOTE: this is used to center the child element (i.e. the button - .btn): */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  /* NOTE: sometimes at the end of animation there is a glitch, this gets rid of that 'bug': */
  backface-visibility: hidden;
  margin-bottom: 60px;
}

.heading-primary-main {
  /* NOTE: span is inline by default, to break into lines we make it a block element (to take up whole width): */
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;

  /* 
  animation-delay: 1s;
  animation-iteration-count: 3;
  */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  animation: moveInRight 1s ease-out;
}

/* NOTE: for browser performance, it's best to animate only two properties (as they are optimized for these): 1) Opacity 2) Transform */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* NOTE: :link and :visited are a special pseudo classes for an anchor element (which our button is here):  */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  /* NOTE: because this element is inline-block, it will be treated as text so we can set text-align on its parent (.text-box) to center it! */
  display: inline-block;
  border-radius: 100px;
  /* NOTE: transition can be used for simpler animations (for more complex use @keyframes): */
  /* NOTE: if not sure what properties to animate, use 'all' to animate all possible properties: */
  transition: all 0.2s;
  /* NOTE: this is used by the ::after pseudo element (.btn::after). This makes .btn the reference element for the pseudo one: */
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  /* NOTE: the first value is offset from x-axis, second is offset from y-axis and third is the blur: */
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* NOTE: :active is for when the btn is clicked: */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* NOTE: ::after is a pseudo element. We create a btn exactly like the one we have and put it behind our btn: */
.btn::after {
  /* NOTE: content and diplay are MANDATORY for a ::after pseudo element to show on the page! */
  content: '';
  display: inline-block;
  /* NOTE: a pseudo element is kind of treated as the child of the element. Here we set the size to be exactly the same as our btn element: */
  height: 100%;
  width: 100%;
  border-radius: 100px;
  /* NOTE: these put the pseudo element behind our element: */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  /* NOTE: the last value is the delay: */
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* NOTE: the styles at 0% keyframe will be applied (before the animation starts) if we use this: */
  animation-fill-mode: backwards;
}
